/* tslint:disable */
/* eslint-disable */
/**
 * Izi Crawler API
 * server-api-v1
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthConfirmResponseDto,
  AuthEmailDto,
  AuthResetPasswordDto,
  AuthSignInDto,
  AuthSignUpDto,
  AuthSignUpResponseDto,
  AuthTokenDto,
  AuthUpdatePasswordDto,
} from '../models/index';
import {
    AuthConfirmResponseDtoFromJSON,
    AuthConfirmResponseDtoToJSON,
    AuthEmailDtoFromJSON,
    AuthEmailDtoToJSON,
    AuthResetPasswordDtoFromJSON,
    AuthResetPasswordDtoToJSON,
    AuthSignInDtoFromJSON,
    AuthSignInDtoToJSON,
    AuthSignUpDtoFromJSON,
    AuthSignUpDtoToJSON,
    AuthSignUpResponseDtoFromJSON,
    AuthSignUpResponseDtoToJSON,
    AuthTokenDtoFromJSON,
    AuthTokenDtoToJSON,
    AuthUpdatePasswordDtoFromJSON,
    AuthUpdatePasswordDtoToJSON,
} from '../models/index';

export interface AuthApiConfirmAccountRequest {
    token: string;
}

export interface AuthApiForgotPasswordRequest {
    authEmailDto: AuthEmailDto;
}

export interface AuthApiResendConfirmEmailRequest {
    authEmailDto: AuthEmailDto;
}

export interface AuthApiResetPasswordRequest {
    authResetPasswordDto: AuthResetPasswordDto;
}

export interface AuthApiSignInRequest {
    authSignInDto: AuthSignInDto;
}

export interface AuthApiSignUpRequest {
    authSignUpDto: AuthSignUpDto;
}

export interface AuthApiUpdatePasswordRequest {
    authUpdatePasswordDto: AuthUpdatePasswordDto;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     */
    async confirmAccountRaw(requestParameters: AuthApiConfirmAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthConfirmResponseDto>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling confirmAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/auth/confirm-account/{token}`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthConfirmResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async confirmAccount(token: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthConfirmResponseDto> {
        const response = await this.confirmAccountRaw({ token: token }, initOverrides);
        return await response.value();
    }

    /**
     */
    async forgotPasswordRaw(requestParameters: AuthApiForgotPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authEmailDto === null || requestParameters.authEmailDto === undefined) {
            throw new runtime.RequiredError('authEmailDto','Required parameter requestParameters.authEmailDto was null or undefined when calling forgotPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/forgot-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthEmailDtoToJSON(requestParameters.authEmailDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async forgotPassword(authEmailDto: AuthEmailDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.forgotPasswordRaw({ authEmailDto: authEmailDto }, initOverrides);
    }

    /**
     */
    async resendConfirmEmailRaw(requestParameters: AuthApiResendConfirmEmailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authEmailDto === null || requestParameters.authEmailDto === undefined) {
            throw new runtime.RequiredError('authEmailDto','Required parameter requestParameters.authEmailDto was null or undefined when calling resendConfirmEmail.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/resend-confirm-email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthEmailDtoToJSON(requestParameters.authEmailDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async resendConfirmEmail(authEmailDto: AuthEmailDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resendConfirmEmailRaw({ authEmailDto: authEmailDto }, initOverrides);
    }

    /**
     */
    async resetPasswordRaw(requestParameters: AuthApiResetPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authResetPasswordDto === null || requestParameters.authResetPasswordDto === undefined) {
            throw new runtime.RequiredError('authResetPasswordDto','Required parameter requestParameters.authResetPasswordDto was null or undefined when calling resetPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/reset-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthResetPasswordDtoToJSON(requestParameters.authResetPasswordDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async resetPassword(authResetPasswordDto: AuthResetPasswordDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.resetPasswordRaw({ authResetPasswordDto: authResetPasswordDto }, initOverrides);
    }

    /**
     */
    async signInRaw(requestParameters: AuthApiSignInRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthTokenDto>> {
        if (requestParameters.authSignInDto === null || requestParameters.authSignInDto === undefined) {
            throw new runtime.RequiredError('authSignInDto','Required parameter requestParameters.authSignInDto was null or undefined when calling signIn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/sign-in`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthSignInDtoToJSON(requestParameters.authSignInDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthTokenDtoFromJSON(jsonValue));
    }

    /**
     */
    async signIn(authSignInDto: AuthSignInDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthTokenDto> {
        const response = await this.signInRaw({ authSignInDto: authSignInDto }, initOverrides);
        return await response.value();
    }

    /**
     */
    async signUpRaw(requestParameters: AuthApiSignUpRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthSignUpResponseDto>> {
        if (requestParameters.authSignUpDto === null || requestParameters.authSignUpDto === undefined) {
            throw new runtime.RequiredError('authSignUpDto','Required parameter requestParameters.authSignUpDto was null or undefined when calling signUp.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/sign-up`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthSignUpDtoToJSON(requestParameters.authSignUpDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthSignUpResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async signUp(authSignUpDto: AuthSignUpDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthSignUpResponseDto> {
        const response = await this.signUpRaw({ authSignUpDto: authSignUpDto }, initOverrides);
        return await response.value();
    }

    /**
     */
    async updatePasswordRaw(requestParameters: AuthApiUpdatePasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authUpdatePasswordDto === null || requestParameters.authUpdatePasswordDto === undefined) {
            throw new runtime.RequiredError('authUpdatePasswordDto','Required parameter requestParameters.authUpdatePasswordDto was null or undefined when calling updatePassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/update-password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthUpdatePasswordDtoToJSON(requestParameters.authUpdatePasswordDto),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updatePassword(authUpdatePasswordDto: AuthUpdatePasswordDto, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updatePasswordRaw({ authUpdatePasswordDto: authUpdatePasswordDto }, initOverrides);
    }

}
